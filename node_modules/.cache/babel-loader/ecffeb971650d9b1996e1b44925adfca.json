{"ast":null,"code":"import { useCallback, useContext, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport useUniqueId from '../utils/useUniqueId';\nimport MenuContext, { MenuActionTypes, MoveFocusTo } from './MenuContext';\n/**\n * Headless ARIA `menuitem`\n */\n\nfunction MenuItem(props) {\n  var _menuState$items$menu;\n\n  var children = props.children,\n      selected = props.selected,\n      disabled = props.disabled,\n      onActivate = props.onActivate;\n  var menuitemRef = useRef();\n  var menuitemId = useUniqueId('menuitem-');\n  var menu = useContext(MenuContext); // fixme make sure <MenuItem> is used inside a <Menu>\n\n  var _ref = menu !== null && menu !== void 0 ? menu : [],\n      menuState = _ref[0],\n      dispatch = _ref[1]; // Whether this menuitem has focus (indicated by `aria-activedescendant` from parent menu)\n\n\n  var hasFocus = (menuState === null || menuState === void 0 ? void 0 : (_menuState$items$menu = menuState.items[menuState === null || menuState === void 0 ? void 0 : menuState.activeItemIndex]) === null || _menuState$items$menu === void 0 ? void 0 : _menuState$items$menu.element) === menuitemRef.current && !!menuitemRef.current;\n  var handleClick = useCallback(function (event) {\n    if (disabled) {\n      return;\n    }\n\n    onActivate === null || onActivate === void 0 ? void 0 : onActivate(event);\n  }, [disabled, onActivate]); // Gain/release focus on mousedown in `menubar`\n\n  var handleMouseDown = useCallback(function () {\n    dispatch({\n      type: MenuActionTypes.MoveFocus,\n      to: MoveFocusTo.Specific,\n      id: menuitemRef.current.id\n    });\n  }, [dispatch]); // Gain/release focus on mouseenter/mouseleave in `menu`\n\n  var handleMouseMove = useCallback(function () {\n    dispatch({\n      type: MenuActionTypes.MoveFocus,\n      to: MoveFocusTo.Specific,\n      id: menuitemRef.current.id\n    });\n  }, [dispatch]);\n  var handleMouseLeave = useCallback(function () {\n    dispatch({\n      type: MenuActionTypes.MoveFocus,\n      to: MoveFocusTo.None\n    });\n  }, [dispatch]);\n  useEffect(function () {\n    var menuitemElement = menuitemRef.current;\n    dispatch === null || dispatch === void 0 ? void 0 : dispatch({\n      type: MenuActionTypes.RegisterItem,\n      element: menuitemElement,\n      props: {\n        disabled: disabled\n      }\n    });\n    return function () {\n      dispatch === null || dispatch === void 0 ? void 0 : dispatch({\n        type: MenuActionTypes.UnregisterItem,\n        id: menuitemElement.id\n      });\n    };\n  }, [menuitemRef, disabled, dispatch]);\n  var menuitemProps = {\n    id: menuitemId,\n    role: 'menuitem',\n    // fixme Only use `aria-checked` on menuitemradio and menuitemcheckbox\n    'aria-checked': selected || undefined,\n    'aria-disabled': disabled,\n    tabIndex: -1,\n    onClick: handleClick,\n    // render props\n    selected: selected,\n    active: hasFocus\n  }; // Only move focus on hover in a `menu`, not `menubar`\n\n  if ((menuState === null || menuState === void 0 ? void 0 : menuState.role) === 'menu') {\n    menuitemProps.onMouseMove = handleMouseMove;\n    menuitemProps.onMouseLeave = handleMouseLeave;\n  }\n\n  if ((menuState === null || menuState === void 0 ? void 0 : menuState.role) === 'menubar') {\n    menuitemProps.onMouseDown = handleMouseDown;\n  }\n\n  return children(menuitemProps, menuitemRef);\n}\n\nMenuItem.displayName = 'MenuItem';\nMenuItem.propTypes = {\n  selected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  children: PropTypes.func.isRequired,\n  onActivate: PropTypes.func\n};\nexport default MenuItem;","map":{"version":3,"sources":["/mnt/c/Users/moham/documents/CSE 3311/Team9Project/node_modules/rsuite/esm/Menu/MenuItem.js"],"names":["useCallback","useContext","useEffect","useRef","PropTypes","useUniqueId","MenuContext","MenuActionTypes","MoveFocusTo","MenuItem","props","_menuState$items$menu","children","selected","disabled","onActivate","menuitemRef","menuitemId","menu","_ref","menuState","dispatch","hasFocus","items","activeItemIndex","element","current","handleClick","event","handleMouseDown","type","MoveFocus","to","Specific","id","handleMouseMove","handleMouseLeave","None","menuitemElement","RegisterItem","UnregisterItem","menuitemProps","role","undefined","tabIndex","onClick","active","onMouseMove","onMouseLeave","onMouseDown","displayName","propTypes","bool","func","isRequired"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,UAAtB,EAAkCC,SAAlC,EAA6CC,MAA7C,QAA2D,OAA3D;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,WAAP,IAAsBC,eAAtB,EAAuCC,WAAvC,QAA0D,eAA1D;AAEA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,MAAIC,qBAAJ;;AAEA,MAAIC,QAAQ,GAAGF,KAAK,CAACE,QAArB;AAAA,MACIC,QAAQ,GAAGH,KAAK,CAACG,QADrB;AAAA,MAEIC,QAAQ,GAAGJ,KAAK,CAACI,QAFrB;AAAA,MAGIC,UAAU,GAAGL,KAAK,CAACK,UAHvB;AAIA,MAAIC,WAAW,GAAGb,MAAM,EAAxB;AACA,MAAIc,UAAU,GAAGZ,WAAW,CAAC,WAAD,CAA5B;AACA,MAAIa,IAAI,GAAGjB,UAAU,CAACK,WAAD,CAArB,CATuB,CASa;;AAEpC,MAAIa,IAAI,GAAGD,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmCA,IAAnC,GAA0C,EAArD;AAAA,MACIE,SAAS,GAAGD,IAAI,CAAC,CAAD,CADpB;AAAA,MAEIE,QAAQ,GAAGF,IAAI,CAAC,CAAD,CAFnB,CAXuB,CAaC;;;AAGxB,MAAIG,QAAQ,GAAG,CAACF,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsD,CAACT,qBAAqB,GAAGS,SAAS,CAACG,KAAV,CAAgBH,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACI,eAAhF,CAAzB,MAA+H,IAA/H,IAAuIb,qBAAqB,KAAK,KAAK,CAAtK,GAA0K,KAAK,CAA/K,GAAmLA,qBAAqB,CAACc,OAAhQ,MAA6QT,WAAW,CAACU,OAAzR,IAAoS,CAAC,CAACV,WAAW,CAACU,OAAjU;AACA,MAAIC,WAAW,GAAG3B,WAAW,CAAC,UAAU4B,KAAV,EAAiB;AAC7C,QAAId,QAAJ,EAAc;AACZ;AACD;;AAEDC,IAAAA,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACa,KAAD,CAAlE;AACD,GAN4B,EAM1B,CAACd,QAAD,EAAWC,UAAX,CAN0B,CAA7B,CAjBuB,CAuBK;;AAE5B,MAAIc,eAAe,GAAG7B,WAAW,CAAC,YAAY;AAC5CqB,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEvB,eAAe,CAACwB,SADf;AAEPC,MAAAA,EAAE,EAAExB,WAAW,CAACyB,QAFT;AAGPC,MAAAA,EAAE,EAAElB,WAAW,CAACU,OAAZ,CAAoBQ;AAHjB,KAAD,CAAR;AAKD,GANgC,EAM9B,CAACb,QAAD,CAN8B,CAAjC,CAzBuB,CA+BP;;AAEhB,MAAIc,eAAe,GAAGnC,WAAW,CAAC,YAAY;AAC5CqB,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEvB,eAAe,CAACwB,SADf;AAEPC,MAAAA,EAAE,EAAExB,WAAW,CAACyB,QAFT;AAGPC,MAAAA,EAAE,EAAElB,WAAW,CAACU,OAAZ,CAAoBQ;AAHjB,KAAD,CAAR;AAKD,GANgC,EAM9B,CAACb,QAAD,CAN8B,CAAjC;AAOA,MAAIe,gBAAgB,GAAGpC,WAAW,CAAC,YAAY;AAC7CqB,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEvB,eAAe,CAACwB,SADf;AAEPC,MAAAA,EAAE,EAAExB,WAAW,CAAC6B;AAFT,KAAD,CAAR;AAID,GALiC,EAK/B,CAAChB,QAAD,CAL+B,CAAlC;AAMAnB,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAIoC,eAAe,GAAGtB,WAAW,CAACU,OAAlC;AACAL,IAAAA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAAC;AAC3DS,MAAAA,IAAI,EAAEvB,eAAe,CAACgC,YADqC;AAE3Dd,MAAAA,OAAO,EAAEa,eAFkD;AAG3D5B,MAAAA,KAAK,EAAE;AACLI,QAAAA,QAAQ,EAAEA;AADL;AAHoD,KAAD,CAA5D;AAOA,WAAO,YAAY;AACjBO,MAAAA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAAC;AAC3DS,QAAAA,IAAI,EAAEvB,eAAe,CAACiC,cADqC;AAE3DN,QAAAA,EAAE,EAAEI,eAAe,CAACJ;AAFuC,OAAD,CAA5D;AAID,KALD;AAMD,GAfQ,EAeN,CAAClB,WAAD,EAAcF,QAAd,EAAwBO,QAAxB,CAfM,CAAT;AAgBA,MAAIoB,aAAa,GAAG;AAClBP,IAAAA,EAAE,EAAEjB,UADc;AAElByB,IAAAA,IAAI,EAAE,UAFY;AAGlB;AACA,oBAAgB7B,QAAQ,IAAI8B,SAJV;AAKlB,qBAAiB7B,QALC;AAMlB8B,IAAAA,QAAQ,EAAE,CAAC,CANO;AAOlBC,IAAAA,OAAO,EAAElB,WAPS;AAQlB;AACAd,IAAAA,QAAQ,EAAEA,QATQ;AAUlBiC,IAAAA,MAAM,EAAExB;AAVU,GAApB,CA9DuB,CAyEpB;;AAEH,MAAI,CAACF,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACsB,IAAjE,MAA2E,MAA/E,EAAuF;AACrFD,IAAAA,aAAa,CAACM,WAAd,GAA4BZ,eAA5B;AACAM,IAAAA,aAAa,CAACO,YAAd,GAA6BZ,gBAA7B;AACD;;AAED,MAAI,CAAChB,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACsB,IAAjE,MAA2E,SAA/E,EAA0F;AACxFD,IAAAA,aAAa,CAACQ,WAAd,GAA4BpB,eAA5B;AACD;;AAED,SAAOjB,QAAQ,CAAC6B,aAAD,EAAgBzB,WAAhB,CAAf;AACD;;AAEDP,QAAQ,CAACyC,WAAT,GAAuB,UAAvB;AACAzC,QAAQ,CAAC0C,SAAT,GAAqB;AACnBtC,EAAAA,QAAQ,EAAET,SAAS,CAACgD,IADD;AAEnBtC,EAAAA,QAAQ,EAAEV,SAAS,CAACgD,IAFD;AAGnBxC,EAAAA,QAAQ,EAAER,SAAS,CAACiD,IAAV,CAAeC,UAHN;AAInBvC,EAAAA,UAAU,EAAEX,SAAS,CAACiD;AAJH,CAArB;AAMA,eAAe5C,QAAf","sourcesContent":["import { useCallback, useContext, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport useUniqueId from '../utils/useUniqueId';\nimport MenuContext, { MenuActionTypes, MoveFocusTo } from './MenuContext';\n\n/**\n * Headless ARIA `menuitem`\n */\nfunction MenuItem(props) {\n  var _menuState$items$menu;\n\n  var children = props.children,\n      selected = props.selected,\n      disabled = props.disabled,\n      onActivate = props.onActivate;\n  var menuitemRef = useRef();\n  var menuitemId = useUniqueId('menuitem-');\n  var menu = useContext(MenuContext); // fixme make sure <MenuItem> is used inside a <Menu>\n\n  var _ref = menu !== null && menu !== void 0 ? menu : [],\n      menuState = _ref[0],\n      dispatch = _ref[1]; // Whether this menuitem has focus (indicated by `aria-activedescendant` from parent menu)\n\n\n  var hasFocus = (menuState === null || menuState === void 0 ? void 0 : (_menuState$items$menu = menuState.items[menuState === null || menuState === void 0 ? void 0 : menuState.activeItemIndex]) === null || _menuState$items$menu === void 0 ? void 0 : _menuState$items$menu.element) === menuitemRef.current && !!menuitemRef.current;\n  var handleClick = useCallback(function (event) {\n    if (disabled) {\n      return;\n    }\n\n    onActivate === null || onActivate === void 0 ? void 0 : onActivate(event);\n  }, [disabled, onActivate]); // Gain/release focus on mousedown in `menubar`\n\n  var handleMouseDown = useCallback(function () {\n    dispatch({\n      type: MenuActionTypes.MoveFocus,\n      to: MoveFocusTo.Specific,\n      id: menuitemRef.current.id\n    });\n  }, [dispatch]); // Gain/release focus on mouseenter/mouseleave in `menu`\n\n  var handleMouseMove = useCallback(function () {\n    dispatch({\n      type: MenuActionTypes.MoveFocus,\n      to: MoveFocusTo.Specific,\n      id: menuitemRef.current.id\n    });\n  }, [dispatch]);\n  var handleMouseLeave = useCallback(function () {\n    dispatch({\n      type: MenuActionTypes.MoveFocus,\n      to: MoveFocusTo.None\n    });\n  }, [dispatch]);\n  useEffect(function () {\n    var menuitemElement = menuitemRef.current;\n    dispatch === null || dispatch === void 0 ? void 0 : dispatch({\n      type: MenuActionTypes.RegisterItem,\n      element: menuitemElement,\n      props: {\n        disabled: disabled\n      }\n    });\n    return function () {\n      dispatch === null || dispatch === void 0 ? void 0 : dispatch({\n        type: MenuActionTypes.UnregisterItem,\n        id: menuitemElement.id\n      });\n    };\n  }, [menuitemRef, disabled, dispatch]);\n  var menuitemProps = {\n    id: menuitemId,\n    role: 'menuitem',\n    // fixme Only use `aria-checked` on menuitemradio and menuitemcheckbox\n    'aria-checked': selected || undefined,\n    'aria-disabled': disabled,\n    tabIndex: -1,\n    onClick: handleClick,\n    // render props\n    selected: selected,\n    active: hasFocus\n  }; // Only move focus on hover in a `menu`, not `menubar`\n\n  if ((menuState === null || menuState === void 0 ? void 0 : menuState.role) === 'menu') {\n    menuitemProps.onMouseMove = handleMouseMove;\n    menuitemProps.onMouseLeave = handleMouseLeave;\n  }\n\n  if ((menuState === null || menuState === void 0 ? void 0 : menuState.role) === 'menubar') {\n    menuitemProps.onMouseDown = handleMouseDown;\n  }\n\n  return children(menuitemProps, menuitemRef);\n}\n\nMenuItem.displayName = 'MenuItem';\nMenuItem.propTypes = {\n  selected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  children: PropTypes.func.isRequired,\n  onActivate: PropTypes.func\n};\nexport default MenuItem;"]},"metadata":{},"sourceType":"module"}