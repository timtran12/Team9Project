{"ast":null,"code":"import React from 'react';\nimport isFunction from 'lodash/isFunction';\nimport get from 'lodash/get';\nimport isNil from 'lodash/isNil';\nimport ColumnGroup from '../ColumnGroup';\nimport HeaderCell from '../HeaderCell';\n\nfunction cloneCell(Cell, props) {\n  return /*#__PURE__*/React.cloneElement(Cell, props);\n}\n\nfunction mergeCells(cells) {\n  var nextCells = [];\n\n  for (var i = 0; i < cells.length; i += 1) {\n    var _cells$i$props = cells[i].props,\n        width = _cells$i$props.width,\n        colSpan = _cells$i$props.colSpan,\n        groupCount = _cells$i$props.groupCount,\n        groupHeader = _cells$i$props.groupHeader,\n        isHeaderCell = _cells$i$props.isHeaderCell,\n        headerHeight = _cells$i$props.headerHeight,\n        verticalAlign = _cells$i$props.verticalAlign,\n        groupHeaderHeight = _cells$i$props.groupHeaderHeight;\n    var groupChildren = []; // Add grouping to column headers.\n\n    if (groupCount && isHeaderCell) {\n      var nextWidth = width;\n      var left = 0;\n\n      for (var j = 0; j < groupCount; j += 1) {\n        var nextCell = cells[i + j];\n        var _nextCell$props = nextCell.props,\n            nextCellWidth = _nextCell$props.width,\n            sortable = _nextCell$props.sortable,\n            children = _nextCell$props.children,\n            dataKey = _nextCell$props.dataKey,\n            onSortColumn = _nextCell$props.onSortColumn,\n            sortColumn = _nextCell$props.sortColumn,\n            sortType = _nextCell$props.sortType;\n\n        if (j !== 0) {\n          nextWidth += nextCellWidth;\n          left += cells[i + j - 1].props.width;\n          cells[i + j] = cloneCell(nextCell, {\n            removed: true\n          });\n        }\n\n        groupChildren.push( /*#__PURE__*/React.createElement(HeaderCell, {\n          key: j,\n          left: left,\n          dataKey: dataKey,\n          width: nextCellWidth,\n          sortable: sortable,\n          sortColumn: sortColumn,\n          sortType: sortType,\n          onSortColumn: onSortColumn\n        }, children));\n      }\n\n      nextCells.push(cloneCell(cells[i], {\n        width: nextWidth,\n        children: /*#__PURE__*/React.createElement(ColumnGroup, {\n          width: nextWidth,\n          headerHeight: headerHeight,\n          header: groupHeader,\n          verticalAlign: verticalAlign,\n          groupHeaderHeight: groupHeaderHeight\n        }, groupChildren)\n      }));\n      continue;\n    } else if (colSpan) {\n      // If there is a colSpan attribute, go to its next Cell.\n      // Determine whether the value is null or undefined, then merge this cell.\n      var _nextWidth = width;\n\n      for (var _j = 0; _j < colSpan; _j += 1) {\n        var _nextCell = cells[i + _j];\n\n        if (_nextCell) {\n          var _nextCell$props2 = _nextCell.props,\n              rowData = _nextCell$props2.rowData,\n              rowIndex = _nextCell$props2.rowIndex,\n              _children = _nextCell$props2.children,\n              colSpanWidth = _nextCell$props2.width,\n              _isHeaderCell = _nextCell$props2.isHeaderCell,\n              _dataKey = _nextCell$props2.dataKey;\n          var cellText = isFunction(_children) ? _children(rowData, rowIndex) : get(rowData, _dataKey);\n\n          if (rowData && isNil(cellText) || _isHeaderCell && isNil(_children)) {\n            _nextWidth += colSpanWidth;\n            cells[i + _j] = cloneCell(_nextCell, {\n              removed: true\n            });\n          }\n        }\n      }\n\n      nextCells.push(cloneCell(cells[i], {\n        width: _nextWidth,\n        'aria-colspan': _nextWidth > width ? colSpan : undefined\n      }));\n      continue;\n    }\n\n    nextCells.push(cells[i]);\n  }\n\n  return nextCells;\n}\n\nexport default mergeCells;","map":{"version":3,"sources":["/mnt/c/Users/moham/documents/CSE 3311/Team9Project/node_modules/rsuite-table/es/utils/mergeCells.js"],"names":["React","isFunction","get","isNil","ColumnGroup","HeaderCell","cloneCell","Cell","props","cloneElement","mergeCells","cells","nextCells","i","length","_cells$i$props","width","colSpan","groupCount","groupHeader","isHeaderCell","headerHeight","verticalAlign","groupHeaderHeight","groupChildren","nextWidth","left","j","nextCell","_nextCell$props","nextCellWidth","sortable","children","dataKey","onSortColumn","sortColumn","sortType","removed","push","createElement","key","header","_nextWidth","_j","_nextCell","_nextCell$props2","rowData","rowIndex","_children","colSpanWidth","_isHeaderCell","_dataKey","cellText","undefined"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,UAAP,MAAuB,eAAvB;;AAEA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;AAC9B,SAAO,aAAaR,KAAK,CAACS,YAAN,CAAmBF,IAAnB,EAAyBC,KAAzB,CAApB;AACD;;AAED,SAASE,UAAT,CAAoBC,KAApB,EAA2B;AACzB,MAAIC,SAAS,GAAG,EAAhB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,IAAI,CAAvC,EAA0C;AACxC,QAAIE,cAAc,GAAGJ,KAAK,CAACE,CAAD,CAAL,CAASL,KAA9B;AAAA,QACIQ,KAAK,GAAGD,cAAc,CAACC,KAD3B;AAAA,QAEIC,OAAO,GAAGF,cAAc,CAACE,OAF7B;AAAA,QAGIC,UAAU,GAAGH,cAAc,CAACG,UAHhC;AAAA,QAIIC,WAAW,GAAGJ,cAAc,CAACI,WAJjC;AAAA,QAKIC,YAAY,GAAGL,cAAc,CAACK,YALlC;AAAA,QAMIC,YAAY,GAAGN,cAAc,CAACM,YANlC;AAAA,QAOIC,aAAa,GAAGP,cAAc,CAACO,aAPnC;AAAA,QAQIC,iBAAiB,GAAGR,cAAc,CAACQ,iBARvC;AASA,QAAIC,aAAa,GAAG,EAApB,CAVwC,CAUhB;;AAExB,QAAIN,UAAU,IAAIE,YAAlB,EAAgC;AAC9B,UAAIK,SAAS,GAAGT,KAAhB;AACA,UAAIU,IAAI,GAAG,CAAX;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,UAApB,EAAgCS,CAAC,IAAI,CAArC,EAAwC;AACtC,YAAIC,QAAQ,GAAGjB,KAAK,CAACE,CAAC,GAAGc,CAAL,CAApB;AACA,YAAIE,eAAe,GAAGD,QAAQ,CAACpB,KAA/B;AAAA,YACIsB,aAAa,GAAGD,eAAe,CAACb,KADpC;AAAA,YAEIe,QAAQ,GAAGF,eAAe,CAACE,QAF/B;AAAA,YAGIC,QAAQ,GAAGH,eAAe,CAACG,QAH/B;AAAA,YAIIC,OAAO,GAAGJ,eAAe,CAACI,OAJ9B;AAAA,YAKIC,YAAY,GAAGL,eAAe,CAACK,YALnC;AAAA,YAMIC,UAAU,GAAGN,eAAe,CAACM,UANjC;AAAA,YAOIC,QAAQ,GAAGP,eAAe,CAACO,QAP/B;;AASA,YAAIT,CAAC,KAAK,CAAV,EAAa;AACXF,UAAAA,SAAS,IAAIK,aAAb;AACAJ,UAAAA,IAAI,IAAIf,KAAK,CAACE,CAAC,GAAGc,CAAJ,GAAQ,CAAT,CAAL,CAAiBnB,KAAjB,CAAuBQ,KAA/B;AACAL,UAAAA,KAAK,CAACE,CAAC,GAAGc,CAAL,CAAL,GAAerB,SAAS,CAACsB,QAAD,EAAW;AACjCS,YAAAA,OAAO,EAAE;AADwB,WAAX,CAAxB;AAGD;;AAEDb,QAAAA,aAAa,CAACc,IAAd,EAAoB,aAAatC,KAAK,CAACuC,aAAN,CAAoBlC,UAApB,EAAgC;AAC/DmC,UAAAA,GAAG,EAAEb,CAD0D;AAE/DD,UAAAA,IAAI,EAAEA,IAFyD;AAG/DO,UAAAA,OAAO,EAAEA,OAHsD;AAI/DjB,UAAAA,KAAK,EAAEc,aAJwD;AAK/DC,UAAAA,QAAQ,EAAEA,QALqD;AAM/DI,UAAAA,UAAU,EAAEA,UANmD;AAO/DC,UAAAA,QAAQ,EAAEA,QAPqD;AAQ/DF,UAAAA,YAAY,EAAEA;AARiD,SAAhC,EAS9BF,QAT8B,CAAjC;AAUD;;AAEDpB,MAAAA,SAAS,CAAC0B,IAAV,CAAehC,SAAS,CAACK,KAAK,CAACE,CAAD,CAAN,EAAW;AACjCG,QAAAA,KAAK,EAAES,SAD0B;AAEjCO,QAAAA,QAAQ,EAAE,aAAahC,KAAK,CAACuC,aAAN,CAAoBnC,WAApB,EAAiC;AACtDY,UAAAA,KAAK,EAAES,SAD+C;AAEtDJ,UAAAA,YAAY,EAAEA,YAFwC;AAGtDoB,UAAAA,MAAM,EAAEtB,WAH8C;AAItDG,UAAAA,aAAa,EAAEA,aAJuC;AAKtDC,UAAAA,iBAAiB,EAAEA;AALmC,SAAjC,EAMpBC,aANoB;AAFU,OAAX,CAAxB;AAUA;AACD,KA9CD,MA8CO,IAAIP,OAAJ,EAAa;AAClB;AACA;AACA,UAAIyB,UAAU,GAAG1B,KAAjB;;AAEA,WAAK,IAAI2B,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG1B,OAAtB,EAA+B0B,EAAE,IAAI,CAArC,EAAwC;AACtC,YAAIC,SAAS,GAAGjC,KAAK,CAACE,CAAC,GAAG8B,EAAL,CAArB;;AAEA,YAAIC,SAAJ,EAAe;AACb,cAAIC,gBAAgB,GAAGD,SAAS,CAACpC,KAAjC;AAAA,cACIsC,OAAO,GAAGD,gBAAgB,CAACC,OAD/B;AAAA,cAEIC,QAAQ,GAAGF,gBAAgB,CAACE,QAFhC;AAAA,cAGIC,SAAS,GAAGH,gBAAgB,CAACb,QAHjC;AAAA,cAIIiB,YAAY,GAAGJ,gBAAgB,CAAC7B,KAJpC;AAAA,cAKIkC,aAAa,GAAGL,gBAAgB,CAACzB,YALrC;AAAA,cAMI+B,QAAQ,GAAGN,gBAAgB,CAACZ,OANhC;AAOA,cAAImB,QAAQ,GAAGnD,UAAU,CAAC+C,SAAD,CAAV,GAAwBA,SAAS,CAACF,OAAD,EAAUC,QAAV,CAAjC,GAAuD7C,GAAG,CAAC4C,OAAD,EAAUK,QAAV,CAAzE;;AAEA,cAAIL,OAAO,IAAI3C,KAAK,CAACiD,QAAD,CAAhB,IAA8BF,aAAa,IAAI/C,KAAK,CAAC6C,SAAD,CAAxD,EAAqE;AACnEN,YAAAA,UAAU,IAAIO,YAAd;AACAtC,YAAAA,KAAK,CAACE,CAAC,GAAG8B,EAAL,CAAL,GAAgBrC,SAAS,CAACsC,SAAD,EAAY;AACnCP,cAAAA,OAAO,EAAE;AAD0B,aAAZ,CAAzB;AAGD;AACF;AACF;;AAEDzB,MAAAA,SAAS,CAAC0B,IAAV,CAAehC,SAAS,CAACK,KAAK,CAACE,CAAD,CAAN,EAAW;AACjCG,QAAAA,KAAK,EAAE0B,UAD0B;AAEjC,wBAAgBA,UAAU,GAAG1B,KAAb,GAAqBC,OAArB,GAA+BoC;AAFd,OAAX,CAAxB;AAIA;AACD;;AAEDzC,IAAAA,SAAS,CAAC0B,IAAV,CAAe3B,KAAK,CAACE,CAAD,CAApB;AACD;;AAED,SAAOD,SAAP;AACD;;AAED,eAAeF,UAAf","sourcesContent":["import React from 'react';\nimport isFunction from 'lodash/isFunction';\nimport get from 'lodash/get';\nimport isNil from 'lodash/isNil';\nimport ColumnGroup from '../ColumnGroup';\nimport HeaderCell from '../HeaderCell';\n\nfunction cloneCell(Cell, props) {\n  return /*#__PURE__*/React.cloneElement(Cell, props);\n}\n\nfunction mergeCells(cells) {\n  var nextCells = [];\n\n  for (var i = 0; i < cells.length; i += 1) {\n    var _cells$i$props = cells[i].props,\n        width = _cells$i$props.width,\n        colSpan = _cells$i$props.colSpan,\n        groupCount = _cells$i$props.groupCount,\n        groupHeader = _cells$i$props.groupHeader,\n        isHeaderCell = _cells$i$props.isHeaderCell,\n        headerHeight = _cells$i$props.headerHeight,\n        verticalAlign = _cells$i$props.verticalAlign,\n        groupHeaderHeight = _cells$i$props.groupHeaderHeight;\n    var groupChildren = []; // Add grouping to column headers.\n\n    if (groupCount && isHeaderCell) {\n      var nextWidth = width;\n      var left = 0;\n\n      for (var j = 0; j < groupCount; j += 1) {\n        var nextCell = cells[i + j];\n        var _nextCell$props = nextCell.props,\n            nextCellWidth = _nextCell$props.width,\n            sortable = _nextCell$props.sortable,\n            children = _nextCell$props.children,\n            dataKey = _nextCell$props.dataKey,\n            onSortColumn = _nextCell$props.onSortColumn,\n            sortColumn = _nextCell$props.sortColumn,\n            sortType = _nextCell$props.sortType;\n\n        if (j !== 0) {\n          nextWidth += nextCellWidth;\n          left += cells[i + j - 1].props.width;\n          cells[i + j] = cloneCell(nextCell, {\n            removed: true\n          });\n        }\n\n        groupChildren.push( /*#__PURE__*/React.createElement(HeaderCell, {\n          key: j,\n          left: left,\n          dataKey: dataKey,\n          width: nextCellWidth,\n          sortable: sortable,\n          sortColumn: sortColumn,\n          sortType: sortType,\n          onSortColumn: onSortColumn\n        }, children));\n      }\n\n      nextCells.push(cloneCell(cells[i], {\n        width: nextWidth,\n        children: /*#__PURE__*/React.createElement(ColumnGroup, {\n          width: nextWidth,\n          headerHeight: headerHeight,\n          header: groupHeader,\n          verticalAlign: verticalAlign,\n          groupHeaderHeight: groupHeaderHeight\n        }, groupChildren)\n      }));\n      continue;\n    } else if (colSpan) {\n      // If there is a colSpan attribute, go to its next Cell.\n      // Determine whether the value is null or undefined, then merge this cell.\n      var _nextWidth = width;\n\n      for (var _j = 0; _j < colSpan; _j += 1) {\n        var _nextCell = cells[i + _j];\n\n        if (_nextCell) {\n          var _nextCell$props2 = _nextCell.props,\n              rowData = _nextCell$props2.rowData,\n              rowIndex = _nextCell$props2.rowIndex,\n              _children = _nextCell$props2.children,\n              colSpanWidth = _nextCell$props2.width,\n              _isHeaderCell = _nextCell$props2.isHeaderCell,\n              _dataKey = _nextCell$props2.dataKey;\n          var cellText = isFunction(_children) ? _children(rowData, rowIndex) : get(rowData, _dataKey);\n\n          if (rowData && isNil(cellText) || _isHeaderCell && isNil(_children)) {\n            _nextWidth += colSpanWidth;\n            cells[i + _j] = cloneCell(_nextCell, {\n              removed: true\n            });\n          }\n        }\n      }\n\n      nextCells.push(cloneCell(cells[i], {\n        width: _nextWidth,\n        'aria-colspan': _nextWidth > width ? colSpan : undefined\n      }));\n      continue;\n    }\n\n    nextCells.push(cells[i]);\n  }\n\n  return nextCells;\n}\n\nexport default mergeCells;"]},"metadata":{},"sourceType":"module"}