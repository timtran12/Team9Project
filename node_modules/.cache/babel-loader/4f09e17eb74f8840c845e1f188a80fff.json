{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport flatten from 'lodash/flatten';\nimport ColumnGroup from '../ColumnGroup';\n/**\n * Get the columns ReactElement array.\n * - Handling the case where there is an array of <Column> in children.\n * - Filter empty items in children.\n */\n\nfunction getTableColumns(children) {\n  if (!Array.isArray(children)) {\n    return children;\n  }\n\n  var flattenColumns = flatten(children).map(function (column) {\n    if ((column === null || column === void 0 ? void 0 : column.type) === ColumnGroup) {\n      var _column$props = column === null || column === void 0 ? void 0 : column.props,\n          header = _column$props.header,\n          childColumns = _column$props.children,\n          align = _column$props.align,\n          fixed = _column$props.fixed,\n          verticalAlign = _column$props.verticalAlign,\n          groupHeaderHeight = _column$props.groupHeaderHeight;\n\n      return childColumns.map(function (childColumn, index) {\n        // Overwrite the props set by ColumnGroup to Column.\n        var groupCellProps = _extends({}, childColumn === null || childColumn === void 0 ? void 0 : childColumn.props, {\n          groupHeaderHeight: groupHeaderHeight,\n          align: align,\n          fixed: fixed,\n          verticalAlign: verticalAlign\n        });\n        /**\n         * Set attributes for the first column in the group:\n         * @field groupCount: The number of grouping sub-items.\n         * @field groupHeader: Group header title.\n         * @field resizable: Set to not resizable.\n         */\n\n\n        if (index === 0) {\n          groupCellProps.groupCount = childColumns.length;\n          groupCellProps.groupHeader = header;\n          groupCellProps.resizable = false;\n        }\n\n        return /*#__PURE__*/React.cloneElement(childColumn, groupCellProps);\n      });\n    }\n\n    return column;\n  }); // Flatten the array in Columns into a one-dimensional array, and calculate lastColumn and firstColumn.\n\n  return flatten(flattenColumns).filter(function (col) {\n    return col;\n  });\n}\n\nexport default getTableColumns;","map":{"version":3,"sources":["/mnt/c/Users/moham/documents/CSE 3311/Team9Project/node_modules/rsuite-table/es/utils/getTableColumns.js"],"names":["_extends","React","flatten","ColumnGroup","getTableColumns","children","Array","isArray","flattenColumns","map","column","type","_column$props","props","header","childColumns","align","fixed","verticalAlign","groupHeaderHeight","childColumn","index","groupCellProps","groupCount","length","groupHeader","resizable","cloneElement","filter","col"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,eAAT,CAAyBC,QAAzB,EAAmC;AACjC,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAL,EAA8B;AAC5B,WAAOA,QAAP;AACD;;AAED,MAAIG,cAAc,GAAGN,OAAO,CAACG,QAAD,CAAP,CAAkBI,GAAlB,CAAsB,UAAUC,MAAV,EAAkB;AAC3D,QAAI,CAACA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACC,IAAxD,MAAkER,WAAtE,EAAmF;AACjF,UAAIS,aAAa,GAAGF,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACG,KAA3E;AAAA,UACIC,MAAM,GAAGF,aAAa,CAACE,MAD3B;AAAA,UAEIC,YAAY,GAAGH,aAAa,CAACP,QAFjC;AAAA,UAGIW,KAAK,GAAGJ,aAAa,CAACI,KAH1B;AAAA,UAIIC,KAAK,GAAGL,aAAa,CAACK,KAJ1B;AAAA,UAKIC,aAAa,GAAGN,aAAa,CAACM,aALlC;AAAA,UAMIC,iBAAiB,GAAGP,aAAa,CAACO,iBANtC;;AAQA,aAAOJ,YAAY,CAACN,GAAb,CAAiB,UAAUW,WAAV,EAAuBC,KAAvB,EAA8B;AACpD;AACA,YAAIC,cAAc,GAAGtB,QAAQ,CAAC,EAAD,EAAKoB,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACP,KAA3E,EAAkF;AAC7GM,UAAAA,iBAAiB,EAAEA,iBAD0F;AAE7GH,UAAAA,KAAK,EAAEA,KAFsG;AAG7GC,UAAAA,KAAK,EAAEA,KAHsG;AAI7GC,UAAAA,aAAa,EAAEA;AAJ8F,SAAlF,CAA7B;AAMA;AACR;AACA;AACA;AACA;AACA;;;AAGQ,YAAIG,KAAK,KAAK,CAAd,EAAiB;AACfC,UAAAA,cAAc,CAACC,UAAf,GAA4BR,YAAY,CAACS,MAAzC;AACAF,UAAAA,cAAc,CAACG,WAAf,GAA6BX,MAA7B;AACAQ,UAAAA,cAAc,CAACI,SAAf,GAA2B,KAA3B;AACD;;AAED,eAAO,aAAazB,KAAK,CAAC0B,YAAN,CAAmBP,WAAnB,EAAgCE,cAAhC,CAApB;AACD,OAvBM,CAAP;AAwBD;;AAED,WAAOZ,MAAP;AACD,GArCoB,CAArB,CALiC,CA0C7B;;AAEJ,SAAOR,OAAO,CAACM,cAAD,CAAP,CAAwBoB,MAAxB,CAA+B,UAAUC,GAAV,EAAe;AACnD,WAAOA,GAAP;AACD,GAFM,CAAP;AAGD;;AAED,eAAezB,eAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport flatten from 'lodash/flatten';\nimport ColumnGroup from '../ColumnGroup';\n/**\n * Get the columns ReactElement array.\n * - Handling the case where there is an array of <Column> in children.\n * - Filter empty items in children.\n */\n\nfunction getTableColumns(children) {\n  if (!Array.isArray(children)) {\n    return children;\n  }\n\n  var flattenColumns = flatten(children).map(function (column) {\n    if ((column === null || column === void 0 ? void 0 : column.type) === ColumnGroup) {\n      var _column$props = column === null || column === void 0 ? void 0 : column.props,\n          header = _column$props.header,\n          childColumns = _column$props.children,\n          align = _column$props.align,\n          fixed = _column$props.fixed,\n          verticalAlign = _column$props.verticalAlign,\n          groupHeaderHeight = _column$props.groupHeaderHeight;\n\n      return childColumns.map(function (childColumn, index) {\n        // Overwrite the props set by ColumnGroup to Column.\n        var groupCellProps = _extends({}, childColumn === null || childColumn === void 0 ? void 0 : childColumn.props, {\n          groupHeaderHeight: groupHeaderHeight,\n          align: align,\n          fixed: fixed,\n          verticalAlign: verticalAlign\n        });\n        /**\n         * Set attributes for the first column in the group:\n         * @field groupCount: The number of grouping sub-items.\n         * @field groupHeader: Group header title.\n         * @field resizable: Set to not resizable.\n         */\n\n\n        if (index === 0) {\n          groupCellProps.groupCount = childColumns.length;\n          groupCellProps.groupHeader = header;\n          groupCellProps.resizable = false;\n        }\n\n        return /*#__PURE__*/React.cloneElement(childColumn, groupCellProps);\n      });\n    }\n\n    return column;\n  }); // Flatten the array in Columns into a one-dimensional array, and calculate lastColumn and firstColumn.\n\n  return flatten(flattenColumns).filter(function (col) {\n    return col;\n  });\n}\n\nexport default getTableColumns;"]},"metadata":{},"sourceType":"module"}