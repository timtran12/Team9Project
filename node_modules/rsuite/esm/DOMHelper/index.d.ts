import * as helpers from 'dom-lib';
export * from 'dom-lib';
declare const DOMHelper: {
    isElement: (node: HTMLElement) => boolean;
    animation: typeof helpers.animation;
    transition: () => {
        end: any;
        backfaceVisibility: string;
        transform: string;
        property: string;
        timing: string;
        delay: string;
        duration: string;
    };
    translateDOMPositionXY: (style: CSSStyleDeclaration, x?: number, y?: number) => CSSStyleDeclaration;
    getVendorPrefixedName: typeof helpers.getVendorPrefixedName;
    BrowserSupportCore: {
        hasCSSAnimations: () => boolean;
        hasCSSTransforms: () => boolean;
        hasCSS3DTransforms: () => boolean;
        hasCSSTransitions: () => boolean;
    };
    DOMMouseMoveTracker: typeof helpers.DOMMouseMoveTracker;
    WheelHandler: typeof helpers.WheelHandler;
    addClass: (target: Element, className: string) => Element;
    hasClass: (target: Element, className: string) => boolean;
    removeClass: (target: Element, className: string) => Element;
    toggleClass: (target: Element, className: string) => Element;
    getStyle: (node: Element, property?: string) => string | CSSStyleDeclaration;
    removeStyle: (node: Element, keys: string | string[]) => void;
    addStyle: (node: Element, property: string | import("dom-lib/lib/style/addStyle").CSSProperty, value?: string | number) => void;
    getComputedStyle: (node: Element) => CSSStyleDeclaration;
    ownerDocument: (node: Element) => Document;
    ownerWindow: (componentOrElement: Element) => Window;
    getWindow: (node: any) => Window;
    getContainer: (container: Element | (() => Element), defaultContainer?: Element) => Element;
    canUseDOM: boolean;
    contains: (context: Element, node: Node & ParentNode) => boolean;
    scrollTop: (node: Element, val?: number) => number;
    scrollLeft: (node: Element, val?: number) => number;
    getOffset: (node: Element) => {
        top: number;
        left: number;
        height: number;
        width: number;
    } | DOMRect;
    nodeName: (node: Element) => string;
    getOffsetParent: (node: Element) => Element;
    getPosition: (node: Element, offsetParent?: Element) => DOMRect | {
        top: number;
        left: number;
        height: number;
        width: number;
    };
    isOverflowing: (container: Element) => boolean;
    activeElement: (doc?: Document) => Element;
    getScrollbarSize: (recalc?: boolean) => number | void;
    getHeight: (node: Element | Window, client?: Element) => number;
    getWidth: (node: Element | Window, client?: Element) => number;
    on: typeof helpers.on;
    off: typeof helpers.off;
};
export default DOMHelper;
