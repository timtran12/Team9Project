import { useRef, useCallback, useEffect } from 'react';
import { getWidth, getHeight, getOffset } from 'dom-lib';
import { SCROLLBAR_WIDTH } from '../constants';
import debounce from 'lodash/debounce';
import bindElementResize, { unbind as unbindElementResize } from 'element-resize-event';
import useMount from './useMount';
import useUpdateLayoutEffect from './useUpdateLayoutEffect';
import isNumberOrTrue from './isNumberOrTrue';

/**
 * The dimension information of the table,
 * including the height, width, scrollable distance and the coordinates of the scroll handle, etc.
 * @param props
 * @returns
 */
var useTableDimension = function useTableDimension(props) {
  var data = props.data,
      rowHeight = props.rowHeight,
      tableRef = props.tableRef,
      headerWrapperRef = props.headerWrapperRef,
      prefix = props.prefix,
      widthProp = props.width,
      affixHeader = props.affixHeader,
      affixHorizontalScrollbar = props.affixHorizontalScrollbar,
      headerHeight = props.headerHeight,
      height = props.height,
      autoHeight = props.autoHeight,
      children = props.children,
      expandedRowKeys = props.expandedRowKeys,
      onTableWidthChange = props.onTableWidthChange,
      onTableContentWidthChange = props.onTableContentWidthChange,
      onTableContentHeightChange = props.onTableContentHeightChange,
      onTableScroll = props.onTableScroll;
  var contentHeight = useRef(0);
  var contentWidth = useRef(0);
  var minScrollY = useRef(0);
  var scrollY = useRef(0);
  var scrollX = useRef(0);
  var minScrollX = useRef(0);
  var tableWidth = useRef(widthProp || 0);
  var headerOffset = useRef(null);
  var tableOffset = useRef(null);
  var calculateTableContextHeight = useCallback(function () {
    var prevContentHeight = contentHeight.current;
    var table = tableRef.current;
    var rows = table.querySelectorAll("." + prefix('row')) || [];
    var nextContentHeight = rows.length ? Array.from(rows).map(function (row) {
      return getHeight(row) || rowHeight;
    }).reduce(function (x, y) {
      return x + y;
    }) : 0; // After setting the affixHeader property, the height of the two headers should be subtracted.

    contentHeight.current = nextContentHeight - (affixHeader ? headerHeight * 2 : headerHeight);

    if (!autoHeight) {
      /**
       *  The purpose of subtracting SCROLLBAR_WIDTH is to keep the scroll bar from blocking the content part.
       *  But it will only be calculated when there is a horizontal scroll bar (contentWidth > tableWidth).
       */
      minScrollY.current = -(nextContentHeight - height) - (contentWidth.current > tableWidth.current ? SCROLLBAR_WIDTH : 0);
    } // If the height of the content area is less than the height of the table, the vertical scroll bar is reset.


    if (nextContentHeight < height) {
      onTableScroll({
        y: 0
      });
    } // If the value of scrollTop is greater than the scrollable range, the vertical scroll bar is reset.
    // When Table is set to virtualized, the logic will be entered every time the wheel event is triggered
    // to avoid resetting the scroll bar after scrolling to the bottom, so add the SCROLLBAR_WIDTH value.


    if (Math.abs(scrollY.current) + height - headerHeight > nextContentHeight + SCROLLBAR_WIDTH) {
      onTableScroll({
        y: scrollY.current
      });
    }

    if (prevContentHeight !== contentHeight.current) {
      onTableContentHeightChange(prevContentHeight);
    }
  }, [affixHeader, autoHeight, headerHeight, height, onTableScroll, onTableContentHeightChange, prefix, rowHeight, tableRef]);
  var setOffsetByAffix = useCallback(function () {
    var headerNode = headerWrapperRef === null || headerWrapperRef === void 0 ? void 0 : headerWrapperRef.current;

    if (isNumberOrTrue(affixHeader) && headerNode) {
      headerOffset.current = getOffset(headerNode);
    }

    if (isNumberOrTrue(affixHorizontalScrollbar) && tableRef !== null && tableRef !== void 0 && tableRef.current) {
      tableOffset.current = getOffset(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);
    }
  }, [affixHeader, affixHorizontalScrollbar, headerWrapperRef, tableRef]);
  var calculateTableContentWidth = useCallback(function () {
    var prevWidth = contentWidth.current;
    var table = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current;
    var row = table.querySelector("." + prefix('row') + ":not(.virtualized)");
    var nextContentWidth = row ? getWidth(row) : 0;
    contentWidth.current = nextContentWidth; // The value of SCROLLBAR_WIDTH is subtracted so that the scroll bar does not block the content part.
    // There is no vertical scroll bar after autoHeight.

    minScrollX.current = -(nextContentWidth - tableWidth.current) - (autoHeight ? 0 : SCROLLBAR_WIDTH);

    if (prevWidth !== contentWidth.current) {
      onTableContentWidthChange(prevWidth);
    }
  }, [autoHeight, onTableContentWidthChange, prefix, tableRef]);
  var calculateTableWidth = useCallback(function () {
    var prevWidth = tableWidth.current;

    if (tableRef !== null && tableRef !== void 0 && tableRef.current) {
      var nextWidth = getWidth(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);
      tableWidth.current = nextWidth;
    }

    if (prevWidth !== tableWidth.current) {
      scrollX.current = 0;
      onTableWidthChange === null || onTableWidthChange === void 0 ? void 0 : onTableWidthChange(prevWidth);
    }

    setOffsetByAffix();
  }, [onTableWidthChange, setOffsetByAffix, tableRef]);
  useMount(function () {
    calculateTableContextHeight();
    calculateTableContentWidth();
    calculateTableWidth();
    setOffsetByAffix();
    bindElementResize(tableRef.current, debounce(calculateTableWidth, 400));
  });
  useUpdateLayoutEffect(function () {
    calculateTableWidth();
    calculateTableContextHeight();
    calculateTableContentWidth();
  }, [data, height, contentHeight, expandedRowKeys, children, calculateTableContextHeight, calculateTableContentWidth]);
  useEffect(function () {
    return function () {
      if (tableRef.current) {
        // eslint-disable-next-line react-hooks/exhaustive-deps
        unbindElementResize(tableRef.current);
      }
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  var setScrollY = useCallback(function (value) {
    scrollY.current = value;
  }, []);
  var setScrollX = useCallback(function (value) {
    scrollX.current = value;
  }, []);
  return {
    contentHeight: contentHeight,
    contentWidth: contentWidth,
    minScrollY: minScrollY,
    minScrollX: minScrollX,
    scrollY: scrollY,
    scrollX: scrollX,
    tableWidth: tableWidth,
    headerOffset: headerOffset,
    tableOffset: tableOffset,
    setScrollY: setScrollY,
    setScrollX: setScrollX
  };
};

export default useTableDimension;